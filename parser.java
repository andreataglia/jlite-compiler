
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import jnodes.*;
import utils.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\004\004\000\002\002\004\000\002\014" +
    "\014\000\002\010\002\000\002\010\004\000\002\006\007" +
    "\000\002\033\002\000\002\033\004\000\002\032\005\000" +
    "\002\007\002\000\002\007\006\000\002\007\011\000\002" +
    "\015\002\000\002\015\005\000\002\035\002\000\002\035" +
    "\004\000\002\016\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\036\007\000\002\034\002\000\002\034\004\000\002" +
    "\020\017\000\002\020\011\000\002\020\007\000\002\020" +
    "\007\000\002\020\006\000\002\020\010\000\002\020\007" +
    "\000\002\020\005\000\002\020\004\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\021\005\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\023\005\000\002\023\003\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\024\005\000" +
    "\002\024\003\000\002\024\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\025\004\000\002\025\003" +
    "\000\002\025\003\000\002\026\005\000\002\026\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\030\003\000\002\030\004\000\002\030" +
    "\003\000\002\031\003\000\002\027\005\000\002\027\006" +
    "\000\002\027\003\000\002\027\003\000\002\027\006\000" +
    "\002\027\005\000\002\027\003\000\002\005\003\000\002" +
    "\037\003\000\002\011\004\000\002\011\002\000\002\013" +
    "\002\000\002\013\004\000\002\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\004\017\006\001\002\000\006\002\ufffe\017" +
    "\240\001\002\000\004\002\236\001\002\000\004\054\007" +
    "\001\002\000\010\011\uffb4\013\uffb4\052\uffb4\001\002\000" +
    "\004\013\011\001\002\000\004\015\012\001\002\000\004" +
    "\016\013\001\002\000\004\011\014\001\002\000\016\012" +
    "\ufff5\015\022\021\020\022\015\024\023\054\007\001\002" +
    "\000\004\052\uffee\001\002\000\004\052\uffec\001\002\000" +
    "\004\052\044\001\002\000\004\052\uffef\001\002\000\004" +
    "\012\024\001\002\000\004\052\uffed\001\002\000\004\052" +
    "\ufff0\001\002\000\004\013\025\001\002\000\040\011\ufffb" +
    "\015\022\021\020\022\015\023\ufffb\024\023\026\ufffb\027" +
    "\ufffb\030\ufffb\033\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\054\007\001\002\000\004\014\027\001\002\000\006\002" +
    "\uffff\017\uffff\001\002\000\040\011\ufffb\015\022\021\020" +
    "\022\015\023\ufffb\024\023\026\ufffb\027\ufffb\030\ufffb\033" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\054\007\001\002" +
    "\000\004\052\044\001\002\000\026\011\047\023\042\026" +
    "\033\027\035\030\037\033\046\047\045\050\034\051\040" +
    "\052\044\001\002\000\004\011\216\001\002\000\004\054" +
    "\007\001\002\000\004\011\207\001\002\000\030\011\047" +
    "\014\uffea\023\042\026\033\027\035\030\037\033\046\047" +
    "\045\050\034\051\040\052\044\001\002\000\004\011\201" +
    "\001\002\000\044\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\020\uffb6\031\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\001" +
    "\002\000\010\011\uffb9\031\uffb9\032\176\001\002\000\004" +
    "\011\160\001\002\000\006\011\147\031\150\001\002\000" +
    "\046\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\020\uffb5\031\uffb5\032\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\001\002" +
    "\000\044\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\020\uffba\031\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\001\002\000" +
    "\032\004\144\006\065\011\047\044\053\045\056\046\064" +
    "\047\045\050\034\051\040\052\044\053\057\055\067\001" +
    "\002\000\030\006\065\011\047\044\053\045\056\046\064" +
    "\047\045\050\034\051\040\052\044\053\057\055\067\001" +
    "\002\000\044\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\072\012\uffbe\020\uffbe\031\073\034\141\035\136\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\001\002" +
    "\000\034\004\uffde\005\114\006\111\007\120\010\112\012" +
    "\uffde\020\uffde\036\123\037\115\040\122\041\121\042\113" +
    "\043\116\001\002\000\012\004\uffdf\012\uffdf\020\uffdf\034" +
    "\133\001\002\000\022\011\047\044\131\045\056\046\064" +
    "\047\045\050\034\051\040\052\044\001\002\000\004\012" +
    "\127\001\002\000\014\004\uffdb\012\uffdb\020\uffdb\034\uffdb" +
    "\035\105\001\002\000\014\004\uffc8\012\uffc8\020\uffc8\034" +
    "\uffc8\035\uffc8\001\002\000\010\004\uffbd\012\uffbd\020\uffbd" +
    "\001\002\000\040\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\012\uffc5\020\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\001\002\000\044\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\020\uffb9\031\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\001\002\000\014\004\uffd1" +
    "\012\uffd1\020\uffd1\034\uffd1\035\uffd1\001\002\000\014\004" +
    "\uffd6\012\uffd6\020\uffd6\034\uffd6\035\uffd6\001\002\000\014" +
    "\004\uffc7\012\uffc7\020\uffc7\034\uffc7\035\uffc7\001\002\000" +
    "\020\006\065\011\047\047\045\050\034\051\040\052\044" +
    "\055\067\001\002\000\010\004\uffdd\012\uffdd\020\uffdd\001" +
    "\002\000\040\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\012\uffc0\020\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\001\002\000\044\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\072\012\uffbe\020" +
    "\uffbe\031\073\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\001\002\000\040\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf\020\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\001\002\000\032\006\065\011\047\012\uffb2\044\053" +
    "\045\056\046\064\047\045\050\034\051\040\052\044\053" +
    "\057\055\067\001\002\000\004\052\044\001\002\000\044" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\020\uffbc\031\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\001\002\000\006\012" +
    "\uffb1\020\100\001\002\000\004\012\077\001\002\000\044" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\020\uffbb\031\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\001\002\000\030\006" +
    "\065\011\047\044\053\045\056\046\064\047\045\050\034" +
    "\051\040\052\044\053\057\055\067\001\002\000\004\012" +
    "\uffb3\001\002\000\006\012\uffb1\020\100\001\002\000\004" +
    "\012\uffb0\001\002\000\006\012\uffaf\020\uffaf\001\002\000" +
    "\026\006\065\011\047\044\053\045\056\046\064\047\045" +
    "\050\034\051\040\052\044\055\067\001\002\000\026\005" +
    "\114\006\111\007\120\010\112\036\123\037\115\040\122" +
    "\041\121\042\113\043\116\001\002\000\044\004\uffd5\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\072\012\uffd5\020\uffd5" +
    "\031\073\034\uffd5\035\uffd5\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\001\002\000\014\004\uffd7\012\uffd7" +
    "\020\uffd7\034\uffd7\035\uffd7\001\002\000\020\006\uffc3\011" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\055\uffc3\001\002" +
    "\000\020\006\uffc1\011\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\055\uffc1\001\002\000\020\006\uffcb\011\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\055\uffcb\001\002\000\020\006" +
    "\uffc4\011\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\055\uffc4" +
    "\001\002\000\020\006\uffce\011\uffce\047\uffce\050\uffce\051" +
    "\uffce\052\uffce\055\uffce\001\002\000\020\006\uffca\011\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\055\uffca\001\002\000" +
    "\020\006\065\011\047\047\045\050\034\051\040\052\044" +
    "\055\067\001\002\000\020\006\uffc2\011\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\055\uffc2\001\002\000\020\006\uffcc" +
    "\011\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\001" +
    "\002\000\020\006\uffcd\011\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\055\uffcd\001\002\000\020\006\uffcf\011\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\055\uffcf\001\002\000\020" +
    "\006\065\011\047\047\045\050\034\051\040\052\044\055" +
    "\067\001\002\000\024\004\uffd2\005\114\006\111\007\120" +
    "\010\112\012\uffd2\020\uffd2\034\uffd2\035\uffd2\001\002\000" +
    "\040\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6" +
    "\020\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\001\002\000\044\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\020\uffb7\031" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\001\002\000\020\004\uffd0\011\072\012" +
    "\uffd0\020\uffd0\031\073\034\uffd0\035\uffd0\001\002\000\010" +
    "\044\131\045\056\046\064\001\002\000\014\004\uffc9\012" +
    "\uffc9\020\uffc9\034\uffc9\035\uffc9\001\002\000\026\006\065" +
    "\011\047\044\053\045\056\046\064\047\045\050\034\051" +
    "\040\052\044\055\067\001\002\000\014\004\uffdc\012\uffdc" +
    "\020\uffdc\034\uffdc\035\105\001\002\000\044\004\uffda\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\072\012\uffda\020\uffda" +
    "\031\073\034\uffda\035\136\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\001\002\000\026\006\065\011\047" +
    "\044\053\045\056\046\064\047\045\050\034\051\040\052" +
    "\044\055\067\001\002\000\044\004\uffd4\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\072\012\uffd4\020\uffd4\031\073\034" +
    "\uffd4\035\uffd4\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\001\002\000\014\004\uffd3\012\uffd3\020\uffd3\034" +
    "\uffd3\035\uffd3\001\002\000\026\006\065\011\047\044\053" +
    "\045\056\046\064\047\045\050\034\051\040\052\044\055" +
    "\067\001\002\000\014\004\uffd8\012\uffd8\020\uffd8\034\uffd8" +
    "\035\105\001\002\000\044\004\uffd9\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\072\012\uffd9\020\uffd9\031\073\034\uffd9" +
    "\035\136\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\001\002\000\030\011\uffe0\014\uffe0\023\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\033\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\001\002\000\004\004\146\001\002\000\030\011\uffe1" +
    "\014\uffe1\023\uffe1\026\uffe1\027\uffe1\030\uffe1\033\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\001\002\000\032\006\065" +
    "\011\047\012\uffb2\044\053\045\056\046\064\047\045\050" +
    "\034\051\040\052\044\053\057\055\067\001\002\000\004" +
    "\052\044\001\002\000\010\011\uffbc\031\uffbc\032\152\001" +
    "\002\000\030\006\065\011\047\044\053\045\056\046\064" +
    "\047\045\050\034\051\040\052\044\053\057\055\067\001" +
    "\002\000\004\004\154\001\002\000\030\011\uffe3\014\uffe3" +
    "\023\uffe3\026\uffe3\027\uffe3\030\uffe3\033\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\001\002\000\004\012\156\001\002" +
    "\000\010\004\157\011\uffbb\031\uffbb\001\002\000\030\011" +
    "\uffe2\014\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\033\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\uffe2\001\002\000\030\006" +
    "\065\011\047\044\053\045\056\046\064\047\045\050\034" +
    "\051\040\052\044\053\057\055\067\001\002\000\004\012" +
    "\162\001\002\000\004\013\163\001\002\000\026\011\047" +
    "\023\042\026\033\027\035\030\037\033\046\047\045\050" +
    "\034\051\040\052\044\001\002\000\030\011\047\014\uffea" +
    "\023\042\026\033\027\035\030\037\033\046\047\045\050" +
    "\034\051\040\052\044\001\002\000\030\011\047\014\uffea" +
    "\023\042\026\033\027\035\030\037\033\046\047\045\050" +
    "\034\051\040\052\044\001\002\000\004\014\167\001\002" +
    "\000\004\025\170\001\002\000\004\013\171\001\002\000" +
    "\026\011\047\023\042\026\033\027\035\030\037\033\046" +
    "\047\045\050\034\051\040\052\044\001\002\000\030\011" +
    "\047\014\uffea\023\042\026\033\027\035\030\037\033\046" +
    "\047\045\050\034\051\040\052\044\001\002\000\004\014" +
    "\174\001\002\000\030\011\uffe8\014\uffe8\023\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\033\uffe8\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\001\002\000\004\014\uffe9\001\002\000\030\006\065" +
    "\011\047\044\053\045\056\046\064\047\045\050\034\051" +
    "\040\052\044\053\057\055\067\001\002\000\004\004\200" +
    "\001\002\000\030\011\uffe4\014\uffe4\023\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\033\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\001\002\000\030\006\065\011\047\044\053\045\056\046" +
    "\064\047\045\050\034\051\040\052\044\053\057\055\067" +
    "\001\002\000\004\012\203\001\002\000\004\004\204\001" +
    "\002\000\030\011\uffe5\014\uffe5\023\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\033\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\001" +
    "\002\000\004\014\206\001\002\000\016\014\uffeb\015\uffeb" +
    "\021\uffeb\022\uffeb\024\uffeb\054\uffeb\001\002\000\004\052" +
    "\044\001\002\000\004\012\211\001\002\000\004\004\212" +
    "\001\002\000\030\011\uffe6\014\uffe6\023\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\033\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\001\002\000\004\011\214\001\002\000\004\012\215\001" +
    "\002\000\044\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\020\uffb8\031\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\001\002" +
    "\000\030\006\065\011\047\044\053\045\056\046\064\047" +
    "\045\050\034\051\040\052\044\053\057\055\067\001\002" +
    "\000\004\012\220\001\002\000\004\013\221\001\002\000" +
    "\030\011\047\014\uffea\023\042\026\033\027\035\030\037" +
    "\033\046\047\045\050\034\051\040\052\044\001\002\000" +
    "\004\014\223\001\002\000\030\011\uffe7\014\uffe7\023\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\033\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\001\002\000\004\004\225\001\002\000\040" +
    "\011\ufff9\015\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\033\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\054\ufff9\001\002\000\026\011\ufffa\023\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\033\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\001\002\000\006\012\ufff3\020\230\001\002\000" +
    "\014\015\022\021\020\022\015\024\023\054\007\001\002" +
    "\000\006\012\ufff3\020\230\001\002\000\004\012\ufff4\001" +
    "\002\000\004\012\ufff2\001\002\000\004\052\044\001\002" +
    "\000\006\012\ufff1\020\ufff1\001\002\000\004\002\000\001" +
    "\002\000\006\002\ufffe\017\240\001\002\000\004\054\007" +
    "\001\002\000\004\002\001\001\002\000\004\013\243\001" +
    "\002\000\016\014\ufff8\015\022\021\020\022\015\024\023" +
    "\054\007\001\002\000\004\014\256\001\002\000\004\052" +
    "\044\001\002\000\006\004\247\011\250\001\002\000\016" +
    "\014\ufff8\015\022\021\020\022\015\024\023\054\007\001" +
    "\002\000\016\012\ufff5\015\022\021\020\022\015\024\023" +
    "\054\007\001\002\000\004\012\252\001\002\000\004\013" +
    "\025\001\002\000\016\014\ufff8\015\022\021\020\022\015" +
    "\024\023\054\007\001\002\000\004\014\ufff6\001\002\000" +
    "\004\014\ufff7\001\002\000\006\002\ufffc\017\ufffc\001\002" +
    "\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\006\004\004\014\003\001\001\000\006\006" +
    "\236\010\240\001\001\000\002\001\001\000\004\037\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\020" +
    "\017\016\037\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\025\001\001\000\012\017\030\032\027\033\031\037\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\030\032\027\033\225\037\015\001\001\000\004\005\223" +
    "\001\001\000\010\005\040\020\035\027\042\001\001\000" +
    "\002\001\001\000\004\037\212\001\001\000\002\001\001" +
    "\000\012\005\040\020\164\027\042\034\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\060\021\051\022\144\023\054\024\062" +
    "\025\061\026\050\027\047\030\057\031\065\001\001\000" +
    "\026\005\060\021\051\022\053\023\054\024\062\025\061" +
    "\026\050\027\047\030\057\031\065\001\001\000\002\001" +
    "\001\000\006\002\116\003\123\001\001\000\002\001\001" +
    "\000\010\005\060\025\131\027\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\060\027\067" +
    "\030\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\060\011\075" +
    "\021\051\022\074\023\054\024\062\025\061\026\050\027" +
    "\047\030\057\031\065\001\001\000\004\005\073\001\001" +
    "\000\002\001\001\000\006\012\101\013\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\060\021\051" +
    "\022\103\023\054\024\062\025\061\026\050\027\047\030" +
    "\057\031\065\001\001\000\002\001\001\000\006\012\101" +
    "\013\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\060\024\107\025\061\026\105\027\106\030\057" +
    "\001\001\000\006\002\116\003\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\060\027\067\030\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\060\026\124\027\067\030\057" +
    "\001\001\000\004\002\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\131\001\001" +
    "\000\002\001\001\000\020\005\060\023\133\024\062\025" +
    "\061\026\105\027\134\030\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\060\024\137\025\061\026" +
    "\105\027\136\030\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\060\023\141\024\062\025\061\026" +
    "\105\027\142\030\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\060\011\154\021\051\022\074\023\054" +
    "\024\062\025\061\026\050\027\047\030\057\031\065\001" +
    "\001\000\004\005\150\001\001\000\002\001\001\000\026" +
    "\005\060\021\051\022\152\023\054\024\062\025\061\026" +
    "\050\027\047\030\057\031\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\005\060\021\051\022\160\023\054" +
    "\024\062\025\061\026\050\027\047\030\057\031\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\040" +
    "\020\163\027\042\001\001\000\012\005\040\020\164\027" +
    "\042\034\165\001\001\000\012\005\040\020\164\027\042" +
    "\034\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\040\020\171\027\042\001\001" +
    "\000\012\005\040\020\164\027\042\034\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\060\021\051\022\176\023\054\024\062\025\061\026" +
    "\050\027\047\030\057\031\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\060\021\051\022\201\023" +
    "\054\024\062\025\061\026\050\027\047\030\057\031\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\060\021\051\022\216\023\054\024\062\025" +
    "\061\026\050\027\047\030\057\031\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\040\020\164\027" +
    "\042\034\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\230\035\231\001\001\000\006\017\233\037\015" +
    "\001\001\000\006\016\230\035\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\236\010\256\001" +
    "\001\000\004\037\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\243\017\244\037\015\001\001\000" +
    "\002\001\001\000\004\005\245\001\001\000\002\001\001" +
    "\000\010\007\254\017\244\037\015\001\001\000\010\015" +
    "\250\017\016\037\015\001\001\000\002\001\001\000\004" +
    "\036\252\001\001\000\010\007\253\017\244\037\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.out.println("\n-----------------------");
        System.out.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    boolean reducedVarDecl = false;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= mainClass classDeclList 
            {
              JProgram RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JMainClass a = (JMainClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JClassDeclList b = (JClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JProgram(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JProgram start_val = (JProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainClass ::= CLASS cname LBRACE VOID MAIN LPAREN fmlList RPAREN mdBody RBRACE 
            {
              JMainClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		JClassNameType c = (JClassNameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		JFmlList f = (JFmlList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JMdBody m = (JMdBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JMainClass(c, f, m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainClass",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDeclList ::= 
            {
              JClassDeclList RESULT =null;
		 RESULT = new JClassDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDeclList ::= classDecl classDeclList 
            {
              JClassDeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JClassDecl a = (JClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JClassDeclList b = (JClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JClassDeclList(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS cname LBRACE classDeclBody RBRACE 
            {
              JClassDecl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		JClassNameType a = (JClassNameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JClassDeclBody b = (JClassDeclBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 reducedVarDecl = false; RESULT = new JClassDecl(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // varDeclList ::= 
            {
              JVarDeclList RESULT =null;
		 RESULT = new JVarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDeclList ::= varDecl varDeclList 
            {
              JVarDeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JVarDecl a = (JVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JVarDeclList b = (JVarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JVarDeclList(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= type ident SEMICOLON 
            {
              JVarDecl RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JBasicType a = (JBasicType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JId b = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JVarDecl(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classDeclBody ::= 
            {
              JClassDeclBody RESULT =null;
		 RESULT = new JClassDeclBody();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDeclBody",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // classDeclBody ::= type ident SEMICOLON classDeclBody 
            {
              JClassDeclBody RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		JBasicType a = (JBasicType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JId b = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JClassDeclBody c = (JClassDeclBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reducedVarDecl = true; RESULT = new JClassDeclBody(a,b,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDeclBody",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // classDeclBody ::= type ident LPAREN fmlList RPAREN mdBody classDeclBody 
            {
              JClassDeclBody RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		JBasicType a = (JBasicType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		JId b = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		JFmlList c = (JFmlList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JMdBody d = (JMdBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JClassDeclBody e = (JClassDeclBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(reducedVarDecl){ report_fatal_error("cannot accept VarDecl after MdDecl", "");} RESULT = new JClassDeclBody(a,b,c,d,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDeclBody",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fmlList ::= 
            {
              JFmlList RESULT =null;
		 RESULT = new JFmlList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fmlList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fmlList ::= type ident fmlRestList 
            {
              JFmlList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JBasicType t = (JBasicType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JId i = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JFmlRestList f = (JFmlRestList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JFmlList(t,i,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fmlList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fmlRestList ::= 
            {
              JFmlRestList RESULT =null;
		 RESULT = new JFmlRestList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fmlRestList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fmlRestList ::= fmlRest fmlRestList 
            {
              JFmlRestList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JFmlRest a = (JFmlRest)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JFmlRestList b = (JFmlRestList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JFmlRestList(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fmlRestList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fmlRest ::= COMMA type ident 
            {
              JFmlRest RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JBasicType t = (JBasicType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JId i = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JFmlRest(t,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fmlRest",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              JBasicType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBasicType(new BasicType(BasicType.DataType.INT)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOL 
            {
              JBasicType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBasicType(new BasicType(BasicType.DataType.BOOL)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= STRING 
            {
              JBasicType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBasicType(new BasicType(BasicType.DataType.STRING)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= VOID 
            {
              JBasicType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBasicType(new BasicType(BasicType.DataType.VOID)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= cname 
            {
              JBasicType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JClassNameType s = (JClassNameType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // mdBody ::= LBRACE varDeclList stmt stmtList RBRACE 
            {
              JMdBody RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		JVarDeclList a = (JVarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JStmt b = (JStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JStmtList c = (JStmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JMdBody(a,b,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mdBody",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmtList ::= 
            {
              JStmtList RESULT =null;
		 RESULT = new JStmtList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmtList ::= stmt stmtList 
            {
              JStmtList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JStmt a = (JStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JStmtList b = (JStmtList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JStmtList(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= IF LPAREN exp RPAREN LBRACE stmt stmtList RBRACE ELSE LBRACE stmt stmtList RBRACE 
            {
              JStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		JExp e = (JExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		JStmt s = (JStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		JStmtList sl = (JStmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JStmt s2 = (JStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JStmtList sl2 = (JStmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JIfStmt(e,s,sl,s2,sl2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= WHILE LPAREN exp RPAREN LBRACE stmtList RBRACE 
            {
              JStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		JExp e = (JExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JStmtList sl = (JStmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JWhileStmt(e,sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= READLN LPAREN ident RPAREN SEMICOLON 
            {
              JStmt RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JId i = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new JIoStmt(o,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= PRINTLN LPAREN exp RPAREN SEMICOLON 
            {
              JStmt RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JExp e = (JExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new JIoStmt(o,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= ident EQUAL exp SEMICOLON 
            {
              JStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		JId i = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JExp e = (JExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JAssignStmt(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= atom DOT ident EQUAL exp SEMICOLON 
            {
              JStmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		JAtom a = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		JId i = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JExp e = (JExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JAssignStmt(a,i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= atom LPAREN expList RPAREN SEMICOLON 
            {
              JStmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		JAtom a = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JExpList e = (JExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new JAtomExpStmt(a, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= RETURN exp SEMICOLON 
            {
              JStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JExp e = (JExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JReturnStmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= RETURN SEMICOLON 
            {
              JStmt RESULT =null;
		 RESULT = new JReturnStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= bExp 
            {
              JExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JBExp e = (JBExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= aExp 
            {
              JExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JAExp e = (JAExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= sExp 
            {
              JExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JSExp e = (JSExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bExp ::= bExp OR conj 
            {
              JBExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JBExp b = (JBExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JConj c = (JConj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBExp(b,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bExp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bExp ::= conj 
            {
              JBExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JConj c = (JConj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBExp(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bExp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bExp ::= bExp OR atom 
            {
              JBExp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JBExp b = (JBExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JAtom a = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBExp(b,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bExp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bExp ::= atom OR atom 
            {
              JBExp RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JAtom a1 = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JAtom a2 = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBExp(a1,a2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bExp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bExp ::= atom OR conj 
            {
              JBExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JAtom a = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JConj c = (JConj)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBExp(a,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bExp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conj ::= conj AND rExp 
            {
              JConj RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JConj a = (JConj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JRExp b = (JRExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JConj(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conj",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // conj ::= rExp 
            {
              JConj RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JRExp a = (JRExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JConj(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conj",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conj ::= conj AND atom 
            {
              JConj RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JConj a = (JConj)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JAtom b = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JConj(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conj",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // conj ::= atom AND atom 
            {
              JConj RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JAtom a = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JAtom b = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JConj(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conj",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conj ::= atom AND rExp 
            {
              JConj RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JAtom a = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JRExp b = (JRExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JConj(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conj",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rExp ::= aExp bOp aExp 
            {
              JRExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JAExp a = (JAExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JAExp c = (JAExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JRExp(a, b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rExp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rExp ::= bGrd 
            {
              JRExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JBGrd a = (JBGrd)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JRExp(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rExp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rExp ::= NOT atom 
            {
              JRExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JAtom a = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JRExp(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rExp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bOp ::= LT 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bOp ::= GT 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bOp ::= LET 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bOp ::= GET 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bOp ::= DEQUAL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bOp ::= DIFF 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bOp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bGrd ::= NOT bGrd 
            {
              JBGrd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JBGrd a = (JBGrd)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBGrd(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bGrd",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bGrd ::= TRUE 
            {
              JBGrd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBGrd(String.valueOf(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bGrd",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bGrd ::= FALSE 
            {
              JBGrd RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JBGrd(String.valueOf(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bGrd",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // aExp ::= aExp aOp ftr 
            {
              JAExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JAExp a = (JAExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JFtr c = (JFtr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JAExp(a,b,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aExp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // aExp ::= ftr 
            {
              JAExp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JFtr a = (JFtr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JAExp(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aExp",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // aOp ::= PLUS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aOp ::= MINUS 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // aOp ::= TIMES 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // aOp ::= DIVIDE 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aOp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ftr ::= INTEGER_LITERAL 
            {
              JFtr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JFtr(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ftr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ftr ::= MINUS ftr 
            {
              JFtr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JFtr n = (JFtr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JFtr(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ftr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ftr ::= atom 
            {
              JFtr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JAtom n = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JFtr(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ftr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sExp ::= STRING_LITERAL 
            {
              JSExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JSExp(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sExp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // atom ::= atom DOT ident 
            {
              JAtom RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JAtom a = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JId b = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JAtom(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // atom ::= atom LPAREN expList RPAREN 
            {
              JAtom RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		JAtom a = (JAtom)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JExpList b = (JExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JAtom(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // atom ::= THIS 
            {
              JAtom RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JAtom(String.valueOf(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atom ::= ident 
            {
              JAtom RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JId id = (JId)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JAtom(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atom ::= NEW cname LPAREN RPAREN 
            {
              JAtom RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JClassNameType a = (JClassNameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new JAtom(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atom ::= LPAREN exp RPAREN 
            {
              JAtom RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JExp a = (JExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JAtom(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // atom ::= NULL 
            {
              JAtom RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JAtom(String.valueOf(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ident ::= ID 
            {
              JId RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JId(String.valueOf(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cname ::= CNAME 
            {
              JClassNameType RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JClassNameType(new ClassNameType(String.valueOf(c))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cname",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expList ::= exp expRestList 
            {
              JExpList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JExp a = (JExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JExpRestList b = (JExpRestList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JExpList(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expList ::= 
            {
              JExpList RESULT =null;
		 RESULT = new JExpList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expRestList ::= 
            {
              JExpRestList RESULT =null;
		 RESULT = new JExpRestList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRestList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expRestList ::= expRest expRestList 
            {
              JExpRestList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JExpRest a = (JExpRest)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JExpRestList b = (JExpRestList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JExpRestList(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRestList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expRest ::= COMMA exp 
            {
              JExpRest RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JExp e = (JExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JExpRest(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRest",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
