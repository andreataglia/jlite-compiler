/* ----------------------Preliminary Declarations Section--------------------*/
   
import java_cup.runtime.*;
import jnodes.*;
import utils.*;
import java.util.ArrayList;


parser code {:
    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.out.println("\n-----------------------");
        System.out.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    boolean reducedVarDecl = false;
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal String SEMICOLON, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, LBRACE, RBRACE, VOID, MAIN, CLASS, COMMA, BOOL, STRING, IF, INT, ELSE, WHILE, READLN, PRINTLN, DOT, EQUAL, RETURN, OR, AND, LT, GT, LET, GET, DEQUAL, DIFF, NOT, TRUE, FALSE, THIS, NEW, NULL;
terminal String ID, STRING_LITERAL, CNAME;
terminal Integer INTEGER_LITERAL;


non terminal String aOp;
non terminal String bOp;

non terminal JProgram program;
non terminal JId ident;
non terminal JClassDecl classDecl;
non terminal JClassDeclBody classDeclBody;
non terminal JClassDeclList classDeclList;
non terminal JExpList expList;
non terminal JExpRest expRest;
non terminal JExpRestList expRestList;
non terminal JMainClass mainClass;
non terminal JFmlList fmlList;
non terminal JFmlRest fmlRest;
non terminal JBasicType type;
non terminal JStmt stmt;
non terminal JBExp bExp;
non terminal JExp exp;
non terminal JConj conj;
non terminal JRExp rExp;
non terminal JBGrd bGrd;
non terminal JAExp aExp;
non terminal JAtom atom;
non terminal JFtr ftr;
non terminal JSExp sExp;
non terminal JVarDecl varDecl;
non terminal JVarDeclList varDeclList;
non terminal JStmtList stmtList;
non terminal JFmlRestList fmlRestList;
non terminal JMdBody mdBody;
non terminal JClassNameType cname;

/* -------------Precedence and Associatively of Terminals Section----------- */

/* The lower line always will have higher precedence than the line before it.*/
  precedence left PLUS, MINUS;
  precedence left TIMES, DIVIDE;

/* ----------------------------Grammar Section-------------------- */

  program ::= mainClass:a classDeclList:b {: RESULT = new JProgram(a, b); :}
          ;

  mainClass ::= CLASS cname:c LBRACE VOID MAIN LPAREN fmlList:f RPAREN mdBody:m RBRACE {: RESULT = new JMainClass(c, f, m); :}
            ;

  classDeclList ::= {: RESULT = new JClassDeclList(); :}
                  | classDecl:a classDeclList:b {: RESULT = new JClassDeclList(a,b); :}
                  ;

  classDecl ::= CLASS cname:a LBRACE classDeclBody:b RBRACE {: reducedVarDecl = false; RESULT = new JClassDecl(a,b); :}
              ;

  varDeclList ::= {: RESULT = new JVarDeclList(); :}
               | varDecl:a varDeclList:b {: RESULT = new JVarDeclList(a,b); :}
               ;

  varDecl ::= type:a ident:b SEMICOLON {: RESULT = new JVarDecl(a,b); :}
            ;

  classDeclBody ::= {: RESULT = new JClassDeclBody();:}
                | type:a ident:b SEMICOLON classDeclBody:c {: reducedVarDecl = true; RESULT = new JClassDeclBody(a,b,c); :}
                | type:a ident:b LPAREN fmlList:c RPAREN mdBody:d classDeclBody:e {: if(reducedVarDecl){ report_fatal_error("cannot accept VarDecl after MdDecl", "");} RESULT = new JClassDeclBody(a,b,c,d,e); :}
                ;

  fmlList ::= {: RESULT = new JFmlList(); :}
          | type:t ident:i fmlRestList:f {: RESULT = new JFmlList(t,i,f); :}
          ;

  fmlRestList ::= {: RESULT = new JFmlRestList(); :}
              | fmlRest:a fmlRestList:b {: RESULT = new JFmlRestList(a,b); :}
              ;

  fmlRest ::= COMMA type:t ident:i {: RESULT = new JFmlRest(t,i); :}
          ;

  type ::= INT:s {: RESULT = new JBasicType(new BasicType(BasicType.DataType.INT)); :}
        | BOOL:s {: RESULT = new JBasicType(new BasicType(BasicType.DataType.BOOL)); :}
        | STRING:s {: RESULT = new JBasicType(new BasicType(BasicType.DataType.STRING)); :}
        | VOID:s {: RESULT = new JBasicType(new BasicType(BasicType.DataType.VOID)); :}
        | cname:s {: RESULT = s; :}
        ;

  mdBody ::= LBRACE varDeclList:a stmt:b stmtList:c RBRACE {: RESULT = new JMdBody(a,b,c); :}
          ;

  stmtList ::= {: RESULT = new JStmtList(); :}
           | stmt:a stmtList:b {: RESULT = new JStmtList(a,b); :}
           ;

  stmt ::= IF LPAREN exp:e RPAREN LBRACE stmt:s stmtList:sl RBRACE ELSE LBRACE stmt:s2 stmtList:sl2 RBRACE {: RESULT = new JIfStmt(e,s,sl,s2,sl2); :}
       | WHILE LPAREN exp:e RPAREN LBRACE stmt:s stmtList:sl RBRACE {: RESULT = new JWhileStmt(e,s,sl); :}
       | READLN:o LPAREN ident:i RPAREN SEMICOLON {: RESULT = new JIoStmt(o,i); :}
       | PRINTLN:o LPAREN exp:e RPAREN SEMICOLON {: RESULT = new JIoStmt(o,e); :}
       | ident:i EQUAL exp:e SEMICOLON {: RESULT = new JAssignStmt(i, e); :}
       | atom:a DOT ident:i EQUAL exp:e SEMICOLON {: RESULT = new JAtomStmt(a,i,e); :}
       | atom:a LPAREN expList:e RPAREN SEMICOLON {: RESULT = new JAtomExpStmt(a, e); :}
       | RETURN exp:e SEMICOLON {: RESULT = new JReturnStmt(e); :}
       | RETURN SEMICOLON {: RESULT = new JReturnStmt(); :}
       ; 

  exp ::= bExp:e  {: RESULT = e; :}
        | aExp:e  {: RESULT = e; :}
        | sExp:e  {: RESULT = e; :}
      ;

  bExp ::= bExp:b OR conj:c {: RESULT = new JBExp(b,c); :}
        | conj:c {: RESULT = new JBExp(c); :}
        | bExp:b OR atom:a {: RESULT = new JBExp(b,a); :}
        | atom:a1 OR atom:a2 {: RESULT = new JBExp(a1,a2); :}
        | atom:a OR conj:c {: RESULT = new JBExp(a,c); :}
        ; /*binary expression*/


  conj ::= conj:a AND rExp:b {: RESULT = new JConj(a,b); :}
        | rExp:a {: RESULT = new JConj(a); :}
        | conj:a AND atom:b {: RESULT = new JConj(a,b); :}
        | atom:a AND atom:b {: RESULT = new JConj(a,b); :}
        | atom:a AND rExp:b {: RESULT = new JConj(a,b); :}
        ;

  rExp ::= aExp:a bOp:b aExp:c {: RESULT = new JRExp(a, b, c); :}
        | bGrd:a {: RESULT = new JRExp(a); :}
        | NOT atom:a {: RESULT = new JRExp(a); :}
        /*relational expression*/
        ;

  bOp ::= LT:b {: RESULT=b; :} | GT:b {: RESULT=b; :} | LET:b {: RESULT=b; :} | GET:b {: RESULT=b; :} | DEQUAL:b {: RESULT=b; :} | DIFF:b {: RESULT=b; :}
      ;

  bGrd ::= NOT bGrd:a {: RESULT = new JBGrd(a); :}
        | TRUE:a {: RESULT = new JBGrd(String.valueOf(a)); :}
        | FALSE:a {: RESULT = new JBGrd(String.valueOf(a)); :}
        ;  /*binary grd*/

  aExp ::= aExp:a aOp:b ftr:c  {: RESULT = new JAExp(a,b,c); :}
        | ftr:a {: RESULT = new JAExp(a); :} /*arithmetic expression*/
        ;

  aOp ::= PLUS:b {: RESULT= b; :} | MINUS:b {: RESULT=b; :} | TIMES:b {: RESULT=b; :} | DIVIDE:b {: RESULT=b; :}
  	   ;

  ftr ::= INTEGER_LITERAL:n {: RESULT = new JFtr(n); :}
        | MINUS ftr:n {: RESULT = new JFtr(n); :}
        | atom:n {: RESULT = new JFtr(n); :}
      ; /*arithmetic factor*/

  sExp ::= STRING_LITERAL:n {: RESULT = new JSExp(n); :} /*string expression*/
        ;

  atom ::= atom:a DOT ident:b {: RESULT = new JAtom(a,b); :}
       | atom:a LPAREN expList:b RPAREN {: RESULT = new JAtom(a,b); :}
       | THIS:a {: RESULT = new JAtom(String.valueOf(a)); :}
       | ident:id {: RESULT = new JAtom(id); :}
       | NEW cname:a LPAREN RPAREN {: RESULT = new JAtom(a); :}
       | LPAREN exp:a RPAREN {: RESULT = new JAtom(a); :}
       | NULL:a {: RESULT = new JAtom(String.valueOf(a)); :}
       ;

  ident ::= ID:id {: RESULT = new JId(String.valueOf(id)); :}
        ;

  cname ::= CNAME:c {: RESULT = new JClassNameType(new ClassNameType(String.valueOf(c))); :}
        ;

  expList ::= exp:a expRestList:b  {: RESULT = new JExpList(a, b); :}
            |  {: RESULT = new JExpList(); :}
          ;

  expRestList ::=  {: RESULT = new JExpRestList(); :}
              | expRest:a expRestList:b {: RESULT = new JExpRestList(a, b); :}
              ;

  expRest ::= COMMA exp:e {: RESULT = new JExpRest(e); :}
          ; 

