/* ----------------------Preliminary Declarations Section--------------------*/
   
import java_cup.runtime.*;

parser code {:
    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.out.println("\n-----------------------");
        System.out.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    boolean reducedVarDecl = false;
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal           SEMICOLON, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, LBRACE, RBRACE, VOID, MAIN, CLASS, CNAME, ID, COMMA, INT, BOOL, STRING, IF, ELSE, WHILE, READLN, PRINTLN, DOT, EQUAL, RETURN, OR, AND, LT, GT, LET, GET, DEQUAL, DIFF, NOT, TRUE, FALSE, INTEGER_LITERAL, STRING_LITERAL, THIS, NEW, NULL;

non terminal Object     program, mainClass, classDecl, classDeclBody, varDecl, fmlList, fmlRest, type, mdBody, stmt, exp, bExp, conj, rExp, bOp, bGrd, aExp, aOp, ftr, sExp, atom, expList, expRest, expRestList, varDeclList, stmtList, classDeclList, fmlRestList;
   

/* -------------Precedence and Associatively of Terminals Section----------- */
   
/* The lower line always will have higher precedence than the line before it.*/
  precedence left PLUS, MINUS; 
  precedence left TIMES, DIVIDE;

/* ----------------------------Grammar Section-------------------- */

  program ::= mainClass classDeclList
          ;

  mainClass ::= CLASS CNAME LBRACE VOID MAIN LPAREN fmlList RPAREN mdBody RBRACE
            ;

  classDeclList ::= 
                | classDecl classDeclList
                ;

  classDecl ::= CLASS CNAME LBRACE classDeclBody RBRACE {: reducedVarDecl = false; :}
            ;

  varDeclList ::=
              | varDecl varDeclList 
              ;

  varDecl ::= type ID SEMICOLON
           ;

  classDeclBody ::=
                | type ID SEMICOLON classDeclBody {: reducedVarDecl = true; :}
                | type ID LPAREN fmlList RPAREN mdBody classDeclBody {: if(reducedVarDecl){ report_fatal_error("cannot accept VarDecl after MdDecl", ""); } :}
                ;

  fmlList ::=
          | type ID fmlRestList
          ;

  fmlRestList ::= 
              | fmlRest fmlRestList
              ;

  fmlRest ::= COMMA type ID
          ;

  type ::= INT | BOOL | STRING | VOID | CNAME
        ;

  mdBody ::= LBRACE varDeclList stmt stmtList RBRACE
          ;

  stmtList ::=
           | stmt stmtList
           ;

  stmt ::= IF LPAREN exp RPAREN LBRACE stmt stmtList RBRACE ELSE LBRACE stmt stmtList RBRACE
       | WHILE LPAREN exp RPAREN LBRACE stmt stmtList RBRACE
       | READLN LPAREN ID RPAREN SEMICOLON
       | PRINTLN LPAREN exp RPAREN SEMICOLON
       | ID EQUAL exp SEMICOLON | atom DOT ID EQUAL exp SEMICOLON
       | atom LPAREN expList RPAREN SEMICOLON
       | RETURN exp SEMICOLON | RETURN SEMICOLON
       ; 

  exp ::= bExp | aExp | sExp
      ;

  bExp ::= bExp OR conj | conj | bExp OR atom | atom OR atom | atom OR conj /*binary expression*/
        ;

  conj ::= conj AND rExp | rExp | conj AND atom | atom AND atom | atom AND rExp
        ;

  rExp ::= aExp bOp aExp | bGrd | NOT atom /*relational expression*/
        ;

  bOp ::= LT | GT | LET | GET | DEQUAL | DIFF
      ;

  bGrd ::= NOT bGrd | TRUE | FALSE /*binary grd*/
        ;

  aExp ::= aExp aOp ftr | ftr /*arithmetic expression*/
        ;

  aOp ::= PLUS | MINUS | TIMES | DIVIDE
  	   ;

  ftr ::= INTEGER_LITERAL | MINUS ftr | atom /*arithmetic factor*/
      ;

  sExp ::= STRING_LITERAL /*string expression*/
        ;

  atom ::= atom DOT ID | atom LPAREN expList RPAREN
       | THIS | ID | NEW CNAME LPAREN RPAREN
       | LPAREN exp RPAREN | NULL
       ;

  expList ::= exp expRestList | 
          ;

  expRestList ::=
              | expRest expRestList
              ;

  expRest ::= COMMA exp
          ; 

